{
  "stats": {
    "suites": 10,
    "tests": 53,
    "passes": 53,
    "pending": 0,
    "failures": 0,
    "start": "2022-07-22T17:29:03.709Z",
    "end": "2022-07-22T17:33:02.812Z",
    "duration": 49731,
    "testsRegistered": 53,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "023a049e-7341-4b0d-9a41-4ebe94c25ea2",
      "title": "",
      "fullFile": "cypress/integration/10.fluxoDeUsuárioAdministrador.tf.spec.js",
      "file": "cypress/integration/10.fluxoDeUsuárioAdministrador.tf.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "23235635-54bb-4173-8fca-b61f33d643a1",
          "title": "CFT02 - Fluxo de atividades de um usuário administrador da API Serverest",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Usuário administrador se cadastra com sucesso",
              "fullTitle": "CFT02 - Fluxo de atividades de um usuário administrador da API Serverest Usuário administrador se cadastra com sucesso",
              "timedOut": null,
              "duration": 723,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_serverest.default.cadastrarUsuarioAdmComSucesso().then(res => {\n  expect(res.status).to.be.eq(201);\n  cy.contractValidator(res, 'post-usuarios', 201).then(res => expect(res).to.be.eq('Contrato válido!'));\n  expect(res.body.message).to.be.eq('Cadastro realizado com sucesso');\n  _serverest.default.salvarIdUsuario(res);\n});",
              "err": {},
              "uuid": "f12b4c8b-187d-4d92-b733-59c88db9afed",
              "parentUUID": "23235635-54bb-4173-8fca-b61f33d643a1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "b1b37144-102a-452b-96b6-e7369066e83a",
              "title": "Usuário administrador loga com sucesso",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Usuário administrador olha os produtos cadastrados",
                  "fullTitle": "CFT02 - Fluxo de atividades de um usuário administrador da API Serverest Usuário administrador loga com sucesso Usuário administrador olha os produtos cadastrados",
                  "timedOut": null,
                  "duration": 1312,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.buscarProdutos().then(res => {\n  expect(res.status).to.be.eq(200);\n  _validaServerest.default.validarBuscaDeProdutos(res);\n});",
                  "err": {},
                  "uuid": "a0b8e0da-1ff7-4819-9cf8-4ccc337ee1aa",
                  "parentUUID": "b1b37144-102a-452b-96b6-e7369066e83a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Usuário administrador cadastra um novo produto com sucesso",
                  "fullTitle": "CFT02 - Fluxo de atividades de um usuário administrador da API Serverest Usuário administrador loga com sucesso Usuário administrador cadastra um novo produto com sucesso",
                  "timedOut": null,
                  "duration": 1185,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.cadastrarProdutoComSucesso().then(res => {\n  expect(res.status).to.be.eq(201);\n  cy.contractValidator(res, 'post-produtos', 201).then(res => expect(res).to.be.eq('Contrato válido!'));\n  _validaServerest.default.validarCadastroDeProdutosComSucesso(res);\n  _serverest.default.salvarIdProduto(res);\n});",
                  "err": {},
                  "uuid": "2d3d3658-d4ae-458e-8442-3cdc2e44b570",
                  "parentUUID": "b1b37144-102a-452b-96b6-e7369066e83a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Usuário administrador edita um produto com sucesso",
                  "fullTitle": "CFT02 - Fluxo de atividades de um usuário administrador da API Serverest Usuário administrador loga com sucesso Usuário administrador edita um produto com sucesso",
                  "timedOut": null,
                  "duration": 1142,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.editarProdutoComSucesso().then(res => {\n  expect(res.status).to.be.eq(200);\n  cy.contractValidator(res, 'put-produtos', 200).then(res => expect(res).to.be.eq('Contrato válido!'));\n  expect(res.body.message).to.be.eq('Registro alterado com sucesso');\n});",
                  "err": {},
                  "uuid": "6be4ed70-3f18-4f59-82c8-7d7b77cc124b",
                  "parentUUID": "b1b37144-102a-452b-96b6-e7369066e83a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Usuário administrador exclui um produto com sucesso",
                  "fullTitle": "CFT02 - Fluxo de atividades de um usuário administrador da API Serverest Usuário administrador loga com sucesso Usuário administrador exclui um produto com sucesso",
                  "timedOut": null,
                  "duration": 1115,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.excluirProdutoComSucesso().then(res => {\n  expect(res.status).to.be.eq(200);\n  cy.contractValidator(res, 'delete-produtos', 200).then(res => expect(res).to.be.eq('Contrato válido!'));\n  expect(res.body.message).to.be.eq('Registro excluído com sucesso');\n});",
                  "err": {},
                  "uuid": "b48452d0-9f70-4610-b30a-3d3810644094",
                  "parentUUID": "b1b37144-102a-452b-96b6-e7369066e83a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a0b8e0da-1ff7-4819-9cf8-4ccc337ee1aa",
                "2d3d3658-d4ae-458e-8442-3cdc2e44b570",
                "6be4ed70-3f18-4f59-82c8-7d7b77cc124b",
                "b48452d0-9f70-4610-b30a-3d3810644094"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4754,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "f12b4c8b-187d-4d92-b733-59c88db9afed"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 723,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "f415d907-e826-4365-93ed-3e606ec67915",
      "title": "",
      "fullFile": "cypress/integration/2.usuarios.tp.spec.js",
      "file": "cypress/integration/2.usuarios.tp.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "163e933e-df18-4abe-ae8c-fa5eb8b6170d",
          "title": "Casos de teste positivos sobre a rota /usuarios da API Serverest",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "CTP02 - Deve buscar todos os usuários cadastrados",
              "fullTitle": "Casos de teste positivos sobre a rota /usuarios da API Serverest CTP02 - Deve buscar todos os usuários cadastrados",
              "timedOut": null,
              "duration": 590,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_serverest.default.buscarUsuarios().then(res => {\n  expect(res.status).to.be.eq(200);\n  cy.contractValidator(res, 'get-usuarios', 200).then(res => expect(res).to.be.eq('Contrato válido!'));\n  _validaServerest.default.validarBuscaDeUsuarios(res);\n});",
              "err": {},
              "uuid": "3cc415ec-7c9c-45f0-841f-3104c0c593d2",
              "parentUUID": "163e933e-df18-4abe-ae8c-fa5eb8b6170d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "CTP03 - Deve cadastrar um novo usuário com sucesso",
              "fullTitle": "Casos de teste positivos sobre a rota /usuarios da API Serverest CTP03 - Deve cadastrar um novo usuário com sucesso",
              "timedOut": null,
              "duration": 250,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_serverest.default.cadastrarUsuarioComSucesso().then(res => {\n  expect(res.status).to.be.eq(201);\n  cy.contractValidator(res, 'post-usuarios', 201).then(res => expect(res).to.be.eq('Contrato válido!'));\n  expect(res.body.message).to.be.eq('Cadastro realizado com sucesso');\n  _serverest.default.salvarIdUsuario(res);\n});",
              "err": {},
              "uuid": "4851e34d-0e55-49f3-a0e4-7f61f652e7dd",
              "parentUUID": "163e933e-df18-4abe-ae8c-fa5eb8b6170d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "CTP04 - Deve cadastrar um novo usuário administrador com sucesso",
              "fullTitle": "Casos de teste positivos sobre a rota /usuarios da API Serverest CTP04 - Deve cadastrar um novo usuário administrador com sucesso",
              "timedOut": null,
              "duration": 243,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_serverest.default.cadastrarUsuarioAdmComSucesso().then(res => {\n  expect(res.status).to.be.eq(201);\n  cy.contractValidator(res, 'post-usuarios', 201).then(res => expect(res).to.be.eq('Contrato válido!'));\n  expect(res.body.message).to.be.eq('Cadastro realizado com sucesso');\n  _serverest.default.salvarIdUsuarioAdm(res);\n});",
              "err": {},
              "uuid": "13e7faa5-9fa9-48e8-8937-d798bbba3203",
              "parentUUID": "163e933e-df18-4abe-ae8c-fa5eb8b6170d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "CTP05 - Deve buscar um usuário com sucesso",
              "fullTitle": "Casos de teste positivos sobre a rota /usuarios da API Serverest CTP05 - Deve buscar um usuário com sucesso",
              "timedOut": null,
              "duration": 239,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_serverest.default.buscarUmUsuarioComSucesso().then(res => {\n  expect(res.status).to.be.eq(200);\n  cy.contractValidator(res, 'get-usuarios-id', 200).then(res => expect(res).to.be.eq('Contrato válido!'));\n  expect(res.body._id).to.be.eq(`${Cypress.env(\"idUser\")}`);\n});",
              "err": {},
              "uuid": "c53c2e21-da8d-4305-91d6-795dc959dc3f",
              "parentUUID": "163e933e-df18-4abe-ae8c-fa5eb8b6170d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "CTP06 - Deve editar um usuário com sucesso",
              "fullTitle": "Casos de teste positivos sobre a rota /usuarios da API Serverest CTP06 - Deve editar um usuário com sucesso",
              "timedOut": null,
              "duration": 336,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_serverest.default.editarUsuarioComSucesso().then(res => {\n  expect(res.status).to.be.eq(200);\n  cy.contractValidator(res, 'put-usuarios', 200).then(res => expect(res).to.be.eq('Contrato válido!'));\n  expect(res.body.message).to.be.eq('Registro alterado com sucesso');\n});",
              "err": {},
              "uuid": "762a00cf-7332-495f-b3c9-69c78ccb6628",
              "parentUUID": "163e933e-df18-4abe-ae8c-fa5eb8b6170d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "CTP07 - Deve excluir um usuário com sucesso",
              "fullTitle": "Casos de teste positivos sobre a rota /usuarios da API Serverest CTP07 - Deve excluir um usuário com sucesso",
              "timedOut": null,
              "duration": 256,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_serverest.default.excluirUsuarioComSucesso().then(res => {\n  expect(res.status).to.be.eq(200);\n  cy.contractValidator(res, 'delete-usuarios', 200).then(res => expect(res).to.be.eq('Contrato válido!'));\n  expect(res.body.message).to.be.eq('Registro excluído com sucesso');\n});",
              "err": {},
              "uuid": "810ae3c7-368b-4551-81cd-2de910992f3f",
              "parentUUID": "163e933e-df18-4abe-ae8c-fa5eb8b6170d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve excluir um usuário administrador com sucesso",
              "fullTitle": "Casos de teste positivos sobre a rota /usuarios da API Serverest Deve excluir um usuário administrador com sucesso",
              "timedOut": null,
              "duration": 228,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_serverest.default.excluirUsuarioAdmComSucesso().then(res => {\n  expect(res.status).to.be.eq(200);\n  cy.contractValidator(res, 'delete-usuarios', 200).then(res => expect(res).to.be.eq('Contrato válido!'));\n  expect(res.body.message).to.be.eq('Registro excluído com sucesso');\n});",
              "err": {},
              "uuid": "dda19178-0f69-47df-b902-20aae2b70aa4",
              "parentUUID": "163e933e-df18-4abe-ae8c-fa5eb8b6170d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "CTP08 - Deve buscar e salvar um usuário em um arquivo JSON",
              "fullTitle": "Casos de teste positivos sobre a rota /usuarios da API Serverest CTP08 - Deve buscar e salvar um usuário em um arquivo JSON",
              "timedOut": null,
              "duration": 567,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//let inteiro = Factory.gerarInteiroAleatorio()\n_serverest.default.verificarSeExisteUsuario();\n_serverest.default.buscarUsuarios().then(res => {\n  cy.writeFile('./cypress/fixtures/usuario.json', res.body.usuarios[0]);\n  _validaServerest.default.validarBuscaDeUsuarios(res);\n});",
              "err": {},
              "uuid": "37d8c8f1-62cb-4ee3-b6e2-c586e11e02cb",
              "parentUUID": "163e933e-df18-4abe-ae8c-fa5eb8b6170d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "CTP09 - Deve logar com um usuário de um arquivo JSON",
              "fullTitle": "Casos de teste positivos sobre a rota /usuarios da API Serverest CTP09 - Deve logar com um usuário de um arquivo JSON",
              "timedOut": null,
              "duration": 273,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.fixture('usuario.json').then(json => {\n  let usuario = {\n    email: json.email,\n    password: json.password\n  };\n  _serverest.default.logar(usuario).then(res => {\n    _validaServerest.default.validarLoginComSucesso(res);\n    expect(res.status).to.be.eq(200);\n    _serverest.default.salvarBearer(res);\n  });\n});",
              "err": {},
              "uuid": "fd300b71-4c07-4a71-883c-d04dbeddfe0f",
              "parentUUID": "163e933e-df18-4abe-ae8c-fa5eb8b6170d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3cc415ec-7c9c-45f0-841f-3104c0c593d2",
            "4851e34d-0e55-49f3-a0e4-7f61f652e7dd",
            "13e7faa5-9fa9-48e8-8937-d798bbba3203",
            "c53c2e21-da8d-4305-91d6-795dc959dc3f",
            "762a00cf-7332-495f-b3c9-69c78ccb6628",
            "810ae3c7-368b-4551-81cd-2de910992f3f",
            "dda19178-0f69-47df-b902-20aae2b70aa4",
            "37d8c8f1-62cb-4ee3-b6e2-c586e11e02cb",
            "fd300b71-4c07-4a71-883c-d04dbeddfe0f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2982,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "b64034ee-bc11-4934-ac37-8fc686419c4d",
      "title": "",
      "fullFile": "cypress/integration/3.produtos.tp.spec.js",
      "file": "cypress/integration/3.produtos.tp.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "c57089b6-c1dd-4313-b899-2b5d927262bf",
          "title": "Casos de teste positivos sobre a rota /produtos da API Serverest",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "CTP10 - Deve buscar todos os produtos cadastrados",
              "fullTitle": "Casos de teste positivos sobre a rota /produtos da API Serverest CTP10 - Deve buscar todos os produtos cadastrados",
              "timedOut": null,
              "duration": 344,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_serverest.default.buscarProdutos().then(res => {\n  expect(res.status).to.be.eq(200);\n  _validaServerest.default.validarBuscaDeProdutos(res);\n});",
              "err": {},
              "uuid": "fc696192-9027-4e01-ac84-a729e18dd39e",
              "parentUUID": "c57089b6-c1dd-4313-b899-2b5d927262bf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "bb44fe47-bcd1-4aa3-afa0-87b119809cb9",
              "title": "Logar com sucesso em usuário administrador",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "CTP11 - Deve cadastrar um novo produto com sucesso",
                  "fullTitle": "Casos de teste positivos sobre a rota /produtos da API Serverest Logar com sucesso em usuário administrador CTP11 - Deve cadastrar um novo produto com sucesso",
                  "timedOut": null,
                  "duration": 1794,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.cadastrarProdutoComSucesso().then(res => {\n  expect(res.status).to.be.eq(201);\n  cy.contractValidator(res, 'post-produtos', 201).then(res => expect(res).to.be.eq('Contrato válido!'));\n  _validaServerest.default.validarCadastroDeProdutosComSucesso(res);\n  _serverest.default.salvarIdProduto(res);\n});",
                  "err": {},
                  "uuid": "47e7083a-5afc-4391-92d4-29acfa7eb754",
                  "parentUUID": "bb44fe47-bcd1-4aa3-afa0-87b119809cb9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "CTP12 - Deve buscar um produto com sucesso",
                  "fullTitle": "Casos de teste positivos sobre a rota /produtos da API Serverest Logar com sucesso em usuário administrador CTP12 - Deve buscar um produto com sucesso",
                  "timedOut": null,
                  "duration": 1373,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.buscarUmProdutoComSucesso().then(res => {\n  expect(res.status).to.be.eq(200);\n  cy.contractValidator(res, 'get-produtos-id', 200).then(res => expect(res).to.be.eq('Contrato válido!'));\n  expect(res.body._id).to.be.eq(`${Cypress.env(\"idPro\")}`);\n});",
                  "err": {},
                  "uuid": "f6fe9290-dabc-4929-810a-f8451e37971a",
                  "parentUUID": "bb44fe47-bcd1-4aa3-afa0-87b119809cb9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "CTP13 - Deve editar um produto com sucesso",
                  "fullTitle": "Casos de teste positivos sobre a rota /produtos da API Serverest Logar com sucesso em usuário administrador CTP13 - Deve editar um produto com sucesso",
                  "timedOut": null,
                  "duration": 1917,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.editarProdutoComSucesso().then(res => {\n  expect(res.status).to.be.eq(200);\n  cy.contractValidator(res, 'put-produtos', 200).then(res => expect(res).to.be.eq('Contrato válido!'));\n  expect(res.body.message).to.be.eq('Registro alterado com sucesso');\n});",
                  "err": {},
                  "uuid": "a7d999eb-544a-4fb5-8080-9bb776880f0b",
                  "parentUUID": "bb44fe47-bcd1-4aa3-afa0-87b119809cb9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "CTP14 - Deve excluir um produto com sucesso",
                  "fullTitle": "Casos de teste positivos sobre a rota /produtos da API Serverest Logar com sucesso em usuário administrador CTP14 - Deve excluir um produto com sucesso",
                  "timedOut": null,
                  "duration": 1453,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.excluirProdutoComSucesso().then(res => {\n  expect(res.status).to.be.eq(200);\n  cy.contractValidator(res, 'delete-produtos', 200).then(res => expect(res).to.be.eq('Contrato válido!'));\n  expect(res.body.message).to.be.eq('Registro excluído com sucesso');\n});",
                  "err": {},
                  "uuid": "ee01a933-df95-4f5d-b1b8-088d83c0f45d",
                  "parentUUID": "bb44fe47-bcd1-4aa3-afa0-87b119809cb9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "47e7083a-5afc-4391-92d4-29acfa7eb754",
                "f6fe9290-dabc-4929-810a-f8451e37971a",
                "a7d999eb-544a-4fb5-8080-9bb776880f0b",
                "ee01a933-df95-4f5d-b1b8-088d83c0f45d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6537,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "fc696192-9027-4e01-ac84-a729e18dd39e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 344,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "2593d9b2-ab22-4ff6-8bb1-985894315602",
      "title": "",
      "fullFile": "cypress/integration/4.carrinhos.tp.spec.js",
      "file": "cypress/integration/4.carrinhos.tp.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "04bc79de-e9dc-4b92-8211-1f2a4c17d05a",
          "title": "Casos de teste positivos sobre a rota /carrinhos da API Serverest",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "CTP15 - Deve buscar todos os carrinhos cadastrados",
              "fullTitle": "Casos de teste positivos sobre a rota /carrinhos da API Serverest CTP15 - Deve buscar todos os carrinhos cadastrados",
              "timedOut": null,
              "duration": 948,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_serverest.default.buscarCarrinhos().then(res => {\n  cy.contractValidator(res, 'get-carrinhos', 200).then(res => expect(res).to.be.eq('Contrato válido!'));\n});",
              "err": {},
              "uuid": "eb746682-af2d-4f7b-9f6f-39a5fc6296cb",
              "parentUUID": "04bc79de-e9dc-4b92-8211-1f2a4c17d05a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "c37dedd0-99eb-42ae-82d1-457918fcc20d",
              "title": "Logar com sucesso",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve excluir o carrinho do usuário logado, se existir",
                  "fullTitle": "Casos de teste positivos sobre a rota /carrinhos da API Serverest Logar com sucesso Deve excluir o carrinho do usuário logado, se existir",
                  "timedOut": null,
                  "duration": 1462,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.cancelarCarrinho().then(res => {\n  expect(res.status).to.be.eq(200);\n  cy.contractValidator(res, 'delete-carrinhos-cancelar-compra', 200).then(res => expect(res).to.be.eq('Contrato válido!'));\n});",
                  "err": {},
                  "uuid": "d7987506-3f10-4a62-ae5a-7a5e6fa9874d",
                  "parentUUID": "c37dedd0-99eb-42ae-82d1-457918fcc20d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "CTP16 - Deve cadastrar um carrinho com sucesso",
                  "fullTitle": "Casos de teste positivos sobre a rota /carrinhos da API Serverest Logar com sucesso CTP16 - Deve cadastrar um carrinho com sucesso",
                  "timedOut": null,
                  "duration": 1444,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.cadastrarCarrinhoComSucesso().then(res => {\n  _serverest.default.salvarIdCarrinho(res);\n  expect(res.status).to.be.eq(201);\n  cy.contractValidator(res, 'post-carrinhos', 201).then(res => expect(res).to.be.eq('Contrato válido!'));\n  expect(res.body.message).to.be.eq('Cadastro realizado com sucesso');\n});",
                  "err": {},
                  "uuid": "5e114b9c-f8a4-4e5d-a692-f0be7f738d9d",
                  "parentUUID": "c37dedd0-99eb-42ae-82d1-457918fcc20d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "CTP17 - Deve buscar um carrinho com sucesso",
                  "fullTitle": "Casos de teste positivos sobre a rota /carrinhos da API Serverest Logar com sucesso CTP17 - Deve buscar um carrinho com sucesso",
                  "timedOut": null,
                  "duration": 1522,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.buscarUmCarrinhoComSucesso().then(res => {\n  expect(res.status).to.be.eq(200);\n  cy.contractValidator(res, 'get-carrinhos-id', 200).then(res => expect(res).to.be.eq('Contrato válido!'));\n  expect(res.body._id).to.be.eq(`${Cypress.env(\"idCarrinho\")}`);\n});",
                  "err": {},
                  "uuid": "3c4bf1aa-abc8-48d3-8076-08acb80f40a3",
                  "parentUUID": "c37dedd0-99eb-42ae-82d1-457918fcc20d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "CTP18 - Deve excluir outro carrinho e cancelar a compra com sucesso",
                  "fullTitle": "Casos de teste positivos sobre a rota /carrinhos da API Serverest Logar com sucesso CTP18 - Deve excluir outro carrinho e cancelar a compra com sucesso",
                  "timedOut": null,
                  "duration": 1232,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.cancelarCarrinho().then(res => {\n  expect(res.status).to.be.eq(200);\n  cy.contractValidator(res, 'delete-carrinhos-cancelar-compra', 200).then(res => expect(res).to.be.eq('Contrato válido!'));\n  expect(res.body.message).to.be.eq('Registro excluído com sucesso. Estoque dos produtos reabastecido');\n});",
                  "err": {},
                  "uuid": "d5166f49-57c5-4fde-b8ec-1584ffbf8aec",
                  "parentUUID": "c37dedd0-99eb-42ae-82d1-457918fcc20d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve cadastrar outro carrinho com sucesso",
                  "fullTitle": "Casos de teste positivos sobre a rota /carrinhos da API Serverest Logar com sucesso Deve cadastrar outro carrinho com sucesso",
                  "timedOut": null,
                  "duration": 1154,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.cadastrarCarrinhoComSucesso().then(res => {\n  expect(res.status).to.be.eq(201);\n  cy.contractValidator(res, 'post-carrinhos', 201).then(res => expect(res).to.be.eq('Contrato válido!'));\n  expect(res.body.message).to.be.eq('Cadastro realizado com sucesso');\n});",
                  "err": {},
                  "uuid": "2ca66217-e90e-40e7-baa1-d29953a5c7d7",
                  "parentUUID": "c37dedd0-99eb-42ae-82d1-457918fcc20d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "CTP19 - Deve excluir um carrinho e concluir a compra com sucesso",
                  "fullTitle": "Casos de teste positivos sobre a rota /carrinhos da API Serverest Logar com sucesso CTP19 - Deve excluir um carrinho e concluir a compra com sucesso",
                  "timedOut": null,
                  "duration": 1238,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.concluirCarrinho().then(res => {\n  expect(res.status).to.be.eq(200);\n  cy.contractValidator(res, 'delete-carrinhos-concluir-compra', 200).then(res => expect(res).to.be.eq('Contrato válido!'));\n  expect(res.body.message).to.be.eq('Registro excluído com sucesso');\n});",
                  "err": {},
                  "uuid": "4e096408-f2e2-4731-8cd6-59b596b1e0e0",
                  "parentUUID": "c37dedd0-99eb-42ae-82d1-457918fcc20d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d7987506-3f10-4a62-ae5a-7a5e6fa9874d",
                "5e114b9c-f8a4-4e5d-a692-f0be7f738d9d",
                "3c4bf1aa-abc8-48d3-8076-08acb80f40a3",
                "d5166f49-57c5-4fde-b8ec-1584ffbf8aec",
                "2ca66217-e90e-40e7-baa1-d29953a5c7d7",
                "4e096408-f2e2-4731-8cd6-59b596b1e0e0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 8052,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "eb746682-af2d-4f7b-9f6f-39a5fc6296cb"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 948,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "788dd1c0-d941-4290-b997-574441c3856c",
      "title": "",
      "fullFile": "cypress/integration/5.login.tn.spec.js",
      "file": "cypress/integration/5.login.tn.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "184f5f42-4ca9-4682-bcc9-10ba6304c9bf",
          "title": "Casos de teste negativos sobre a rota /login da API Serverest",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "CTN01 - Não deve realizar login utilizando credenciais não registradas",
              "fullTitle": "Casos de teste negativos sobre a rota /login da API Serverest CTN01 - Não deve realizar login utilizando credenciais não registradas",
              "timedOut": null,
              "duration": 563,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_serverestNegative.default.logarSemSucesso().then(res => {\n  cy.contractValidator(res, 'post-login', 401).then(res => expect(res).to.be.eq('Contrato válido!'));\n  expect(res.status).to.be.eq(401);\n  _validaServerest.default.validarLoginSemSucesso(res);\n});",
              "err": {},
              "uuid": "34035a60-207a-4de5-971b-b1e867d1fc6c",
              "parentUUID": "184f5f42-4ca9-4682-bcc9-10ba6304c9bf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "34035a60-207a-4de5-971b-b1e867d1fc6c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 563,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "23a102f8-5cc1-42bc-ab4c-591c9832e038",
      "title": "",
      "fullFile": "cypress/integration/6.usuarios.tn.spec.js",
      "file": "cypress/integration/6.usuarios.tn.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "b48a8f65-3a12-4f01-b110-7909770855f6",
          "title": "Casos de teste negativos sobre a rota /usuarios da API Serverest",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "CTN02 - Não deve cadastrar um novo usuário caso o email já esteja cadastrado",
              "fullTitle": "Casos de teste negativos sobre a rota /usuarios da API Serverest CTN02 - Não deve cadastrar um novo usuário caso o email já esteja cadastrado",
              "timedOut": null,
              "duration": 649,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_serverestNegative.default.buscarUsuarioParaCadastroNegativo();\ncy.get('@usuarioCadastro').then(res => {\n  cy.log(res);\n  _serverestNegative.default.cadastrarUsuarioSemSucesso(res).then(res => {\n    expect(res.status).to.be.eq(400);\n    cy.contractValidator(res, 'post-usuarios', 400).then(res => expect(res).to.be.eq('Contrato válido!'));\n    expect(res.body.message).to.be.eq('Este email já está sendo usado');\n  });\n});",
              "err": {},
              "uuid": "9fd8c06c-d121-4eea-be29-d5a357114eec",
              "parentUUID": "b48a8f65-3a12-4f01-b110-7909770855f6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "CTN03 - Não deve buscar um usuário com um ID não existente ",
              "fullTitle": "Casos de teste negativos sobre a rota /usuarios da API Serverest CTN03 - Não deve buscar um usuário com um ID não existente ",
              "timedOut": null,
              "duration": 235,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_serverestNegative.default.buscarUmUsuarioSemSucesso().then(res => {\n  expect(res.status).to.be.eq(400);\n  cy.contractValidator(res, 'get-usuarios-id', 400).then(res => expect(res).to.be.eq('Contrato válido!'));\n  expect(res.body.message).to.be.eq('Usuário não encontrado');\n});",
              "err": {},
              "uuid": "0ac0af48-02e4-4970-b8f1-3a4198294934",
              "parentUUID": "b48a8f65-3a12-4f01-b110-7909770855f6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "CTN04 - Não deve excluir um usuário com carrinho cadastrado",
              "fullTitle": "Casos de teste negativos sobre a rota /usuarios da API Serverest CTN04 - Não deve excluir um usuário com carrinho cadastrado",
              "timedOut": null,
              "duration": 441,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_serverestNegative.default.buscarUsuarioComCarrinho();\ncy.get('@idUsuario').then(res => {\n  _serverestNegative.default.excluirUsuarioSemSucesso(res).then(res => {\n    expect(res.status).to.be.eq(400);\n    cy.contractValidator(res, 'delete-usuarios', 400).then(res => expect(res).to.be.eq('Contrato válido!'));\n    expect(res.body.message).to.be.eq('Não é permitido excluir usuário com carrinho cadastrado');\n  });\n});",
              "err": {},
              "uuid": "0ddbed96-6622-49cb-90d2-aa9248870bdf",
              "parentUUID": "b48a8f65-3a12-4f01-b110-7909770855f6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9fd8c06c-d121-4eea-be29-d5a357114eec",
            "0ac0af48-02e4-4970-b8f1-3a4198294934",
            "0ddbed96-6622-49cb-90d2-aa9248870bdf"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1325,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "f5feaeac-dba1-43b3-a366-7fcac51488dd",
      "title": "",
      "fullFile": "cypress/integration/7.produtos.tn.spec.js",
      "file": "cypress/integration/7.produtos.tn.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "8ab17463-600b-478f-b5b5-d0aca8571fa5",
          "title": "Casos de teste negativos sobre a rota /produtos da API Serverest",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "CTN05 - Não deve tentar cadastrar um produto caso o token esteja ausente",
              "fullTitle": "Casos de teste negativos sobre a rota /produtos da API Serverest CTN05 - Não deve tentar cadastrar um produto caso o token esteja ausente",
              "timedOut": null,
              "duration": 460,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_serverestNegative.default.cadastrarProdutoSemSucessoToken().then(res => {\n  expect(res.status).to.be.eq(401);\n  cy.contractValidator(res, 'post-produtos', 401).then(res => expect(res).to.be.eq('Contrato válido!'));\n  _validaServerest.default.validarCadastroDeProdutosSemSucessoToken(res);\n});",
              "err": {},
              "uuid": "036e6a19-3029-42f1-98c7-353ba4d2eb55",
              "parentUUID": "8ab17463-600b-478f-b5b5-d0aca8571fa5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "CTN06 - Não deve tentar excluir um produto caso o token esteja ausente",
              "fullTitle": "Casos de teste negativos sobre a rota /produtos da API Serverest CTN06 - Não deve tentar excluir um produto caso o token esteja ausente",
              "timedOut": null,
              "duration": 468,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_serverestNegative.default.buscarProdutoParaAlterar();\ncy.get('@idProdutoAlt').then(res => {\n  _serverestNegative.default.excluirProdutoSemSucessoToken(res).then(res => {\n    expect(res.status).to.be.eq(401);\n    cy.contractValidator(res, 'delete-produtos', 401).then(res => expect(res).to.be.eq('Contrato válido!'));\n    expect(res.body.message).to.be.eq('Token de acesso ausente, inválido, expirado ou usuário do token não existe mais');\n  });\n});",
              "err": {},
              "uuid": "7f383d8b-b9f2-46ee-985a-85becd944e09",
              "parentUUID": "8ab17463-600b-478f-b5b5-d0aca8571fa5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "CTN07 - Não deve tentar editar um produto caso o token esteja ausente",
              "fullTitle": "Casos de teste negativos sobre a rota /produtos da API Serverest CTN07 - Não deve tentar editar um produto caso o token esteja ausente",
              "timedOut": null,
              "duration": 464,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_serverestNegative.default.buscarProdutoParaAlterar();\ncy.get('@idProdutoAlt').then(res => {\n  _serverestNegative.default.editarProdutoSemSucessoToken(res).then(res => {\n    expect(res.status).to.be.eq(401);\n    cy.contractValidator(res, 'put-produtos', 401).then(res => expect(res).to.be.eq('Contrato válido!'));\n    expect(res.body.message).to.be.eq('Token de acesso ausente, inválido, expirado ou usuário do token não existe mais');\n  });\n});",
              "err": {},
              "uuid": "28b9713a-088b-4bb6-8b7e-0fb200902e2b",
              "parentUUID": "8ab17463-600b-478f-b5b5-d0aca8571fa5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "cafb96d0-67f8-473c-8972-63e3e13da4c5",
              "title": "Logar com sucesso em usuário administrador",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "CTN08 - Não deve cadastrar um produto caso o nome já esteja cadastrado",
                  "fullTitle": "Casos de teste negativos sobre a rota /produtos da API Serverest Logar com sucesso em usuário administrador CTN08 - Não deve cadastrar um produto caso o nome já esteja cadastrado",
                  "timedOut": null,
                  "duration": 1222,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_serverestNegative.default.buscarProdutoParaCadastroNegativo();\ncy.get('@produtoCadastro').then(res => {\n  _serverestNegative.default.cadastrarProdutoSemSucesso(res).then(res => {\n    expect(res.status).to.be.eq(400);\n    cy.contractValidator(res, 'post-produtos', 400).then(res => expect(res).to.be.eq('Contrato válido!'));\n    _validaServerest.default.validarCadastroDeProdutosSemSucesso(res);\n  });\n});",
                  "err": {},
                  "uuid": "f9fdb789-625f-4b59-8111-063a96584035",
                  "parentUUID": "cafb96d0-67f8-473c-8972-63e3e13da4c5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "CTN09 - Não deve buscar um produto com um ID não existente",
                  "fullTitle": "Casos de teste negativos sobre a rota /produtos da API Serverest Logar com sucesso em usuário administrador CTN09 - Não deve buscar um produto com um ID não existente",
                  "timedOut": null,
                  "duration": 1138,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_serverestNegative.default.buscarUmProdutoSemSucesso().then(res => {\n  expect(res.status).to.be.eq(400);\n  cy.contractValidator(res, 'get-produtos-id', 400).then(res => expect(res).to.be.eq('Contrato válido!'));\n  expect(res.body.message).to.be.eq('Produto não encontrado');\n});",
                  "err": {},
                  "uuid": "dae1147e-c753-4943-ac11-5ceb05c51a3e",
                  "parentUUID": "cafb96d0-67f8-473c-8972-63e3e13da4c5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "CTN10 - Não deve excluir um produto que esteja em um carrinho",
                  "fullTitle": "Casos de teste negativos sobre a rota /produtos da API Serverest Logar com sucesso em usuário administrador CTN10 - Não deve excluir um produto que esteja em um carrinho",
                  "timedOut": null,
                  "duration": 1125,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_serverestNegative.default.buscarProdutoEmCarrinho();\ncy.get('@idProduto').then(res => {\n  _serverestNegative.default.excluirProdutoSemSucesso(res).then(res => {\n    expect(res.status).to.be.eq(400);\n    cy.contractValidator(res, 'delete-produtos', 400).then(res => expect(res).to.be.eq('Contrato válido!'));\n    expect(res.body.message).to.be.eq('Não é permitido excluir produto que faz parte de carrinho');\n  });\n});",
                  "err": {},
                  "uuid": "9ca83ab1-cc6f-4abf-9620-998e359e046d",
                  "parentUUID": "cafb96d0-67f8-473c-8972-63e3e13da4c5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f9fdb789-625f-4b59-8111-063a96584035",
                "dae1147e-c753-4943-ac11-5ceb05c51a3e",
                "9ca83ab1-cc6f-4abf-9620-998e359e046d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3485,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "91059744-6e89-4988-85e3-b11e65f9fa7a",
              "title": "Logar com sucesso em usuário não administrador",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "CTN11 - Não deve cadastrar um produto caso o usuário não seja administrador",
                  "fullTitle": "Casos de teste negativos sobre a rota /produtos da API Serverest Logar com sucesso em usuário não administrador CTN11 - Não deve cadastrar um produto caso o usuário não seja administrador",
                  "timedOut": null,
                  "duration": 953,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_serverestNegative.default.cadastrarProdutoSemSucessoAdm().then(res => {\n  expect(res.status).to.be.eq(403);\n  cy.contractValidator(res, 'post-produtos', 403).then(res => expect(res).to.be.eq('Contrato válido!'));\n  _validaServerest.default.validarCadastroDeProdutosSemSucessoAdm(res);\n});",
                  "err": {},
                  "uuid": "e8811f42-cae1-45c9-a094-471b1a442526",
                  "parentUUID": "91059744-6e89-4988-85e3-b11e65f9fa7a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "CTN12 - Não deve excluir um produto caso o usuário não seja administrador",
                  "fullTitle": "Casos de teste negativos sobre a rota /produtos da API Serverest Logar com sucesso em usuário não administrador CTN12 - Não deve excluir um produto caso o usuário não seja administrador",
                  "timedOut": null,
                  "duration": 1238,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_serverestNegative.default.buscarProdutoParaAlterar();\ncy.get('@idProdutoAlt').then(res => {\n  _serverestNegative.default.excluirProdutoSemSucessoAdm(res).then(res => {\n    expect(res.status).to.be.eq(403);\n    cy.contractValidator(res, 'delete-produtos', 403).then(res => expect(res).to.be.eq('Contrato válido!'));\n    expect(res.body.message).to.be.eq('Rota exclusiva para administradores');\n  });\n});",
                  "err": {},
                  "uuid": "0d9c5fc3-2d8f-41da-974c-a070c2884243",
                  "parentUUID": "91059744-6e89-4988-85e3-b11e65f9fa7a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "CTN13 - Não deve editar um produto caso o usuário não seja administrador",
                  "fullTitle": "Casos de teste negativos sobre a rota /produtos da API Serverest Logar com sucesso em usuário não administrador CTN13 - Não deve editar um produto caso o usuário não seja administrador",
                  "timedOut": null,
                  "duration": 1190,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_serverestNegative.default.buscarProdutoParaAlterar();\ncy.get('@idProdutoAlt').then(res => {\n  _serverestNegative.default.editarProdutoSemSucessoAdm(res).then(res => {\n    expect(res.status).to.be.eq(403);\n    cy.contractValidator(res, 'put-produtos', 403).then(res => expect(res).to.be.eq('Contrato válido!'));\n    expect(res.body.message).to.be.eq('Rota exclusiva para administradores');\n  });\n});",
                  "err": {},
                  "uuid": "759548e7-7dd6-4faa-b671-4ed0a9f3704b",
                  "parentUUID": "91059744-6e89-4988-85e3-b11e65f9fa7a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e8811f42-cae1-45c9-a094-471b1a442526",
                "0d9c5fc3-2d8f-41da-974c-a070c2884243",
                "759548e7-7dd6-4faa-b671-4ed0a9f3704b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3381,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "036e6a19-3029-42f1-98c7-353ba4d2eb55",
            "7f383d8b-b9f2-46ee-985a-85becd944e09",
            "28b9713a-088b-4bb6-8b7e-0fb200902e2b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1392,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "bb01b8e1-5610-4fb9-b69d-f562c1607102",
      "title": "",
      "fullFile": "cypress/integration/8.carrinhos.tn.spec.js",
      "file": "cypress/integration/8.carrinhos.tn.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "b61338e1-0e3c-4986-a6b2-24cebf892fba",
          "title": "Casos de teste negativos sobre a rota /carrinhos da API Serverest",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "CTN14 - Não deve tentar cadastrar um carrinho caso o token esteja ausente",
              "fullTitle": "Casos de teste negativos sobre a rota /carrinhos da API Serverest CTN14 - Não deve tentar cadastrar um carrinho caso o token esteja ausente",
              "timedOut": null,
              "duration": 427,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_serverestNegative.default.cadastrarCarrinhoSemSucessoToken().then(res => {\n  expect(res.status).to.be.eq(401);\n  cy.contractValidator(res, 'post-carrinhos', 401).then(res => expect(res).to.be.eq('Contrato válido!'));\n  expect(res.body.message).to.be.eq('Token de acesso ausente, inválido, expirado ou usuário do token não existe mais');\n});",
              "err": {},
              "uuid": "f547d60f-1aa2-463d-9c1b-dc2045b05232",
              "parentUUID": "b61338e1-0e3c-4986-a6b2-24cebf892fba",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "CTN15 - Não deve tentar excluir um carrinho e concluir a compra com sucesso caso o token esteja ausente",
              "fullTitle": "Casos de teste negativos sobre a rota /carrinhos da API Serverest CTN15 - Não deve tentar excluir um carrinho e concluir a compra com sucesso caso o token esteja ausente",
              "timedOut": null,
              "duration": 227,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_serverestNegative.default.concluirCarrinhoSemSucesso().then(res => {\n  expect(res.status).to.be.eq(401);\n  cy.contractValidator(res, 'delete-carrinhos-concluir-compra', 401).then(res => expect(res).to.be.eq('Contrato válido!'));\n  expect(res.body.message).to.be.eq('Token de acesso ausente, inválido, expirado ou usuário do token não existe mais');\n});",
              "err": {},
              "uuid": "726ed019-e659-4b6b-876a-174abc99425b",
              "parentUUID": "b61338e1-0e3c-4986-a6b2-24cebf892fba",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "CTN16 - Não deve tentar excluir um carrinho e cancelar a compra com sucesso caso o token esteja ausente",
              "fullTitle": "Casos de teste negativos sobre a rota /carrinhos da API Serverest CTN16 - Não deve tentar excluir um carrinho e cancelar a compra com sucesso caso o token esteja ausente",
              "timedOut": null,
              "duration": 240,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_serverestNegative.default.cancelarCarrinhoSemSucesso().then(res => {\n  cy.contractValidator(res, 'delete-carrinhos-cancelar-compra', 401).then(res => expect(res).to.be.eq('Contrato válido!'));\n  expect(res.body.message).to.be.eq('Token de acesso ausente, inválido, expirado ou usuário do token não existe mais');\n});",
              "err": {},
              "uuid": "0276f4ea-32c8-49f8-a5fc-d62b53929bcb",
              "parentUUID": "b61338e1-0e3c-4986-a6b2-24cebf892fba",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "CTN17 - Não deve buscar um carrinho com um ID não existente",
              "fullTitle": "Casos de teste negativos sobre a rota /carrinhos da API Serverest CTN17 - Não deve buscar um carrinho com um ID não existente",
              "timedOut": null,
              "duration": 254,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_serverestNegative.default.buscarUmCarrinhoSemSucesso().then(res => {\n  expect(res.status).to.be.eq(400);\n  cy.contractValidator(res, 'get-carrinhos-id', 400).then(res => expect(res).to.be.eq('Contrato válido!'));\n});",
              "err": {},
              "uuid": "193d0123-9394-4968-ba7f-686a0dd95c06",
              "parentUUID": "b61338e1-0e3c-4986-a6b2-24cebf892fba",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "acd06649-2d82-456a-b97c-7eaaa9d8374e",
              "title": "Logar com sucesso",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve excluir o carrinho do usuário logado, se existir",
                  "fullTitle": "Casos de teste negativos sobre a rota /carrinhos da API Serverest Logar com sucesso Deve excluir o carrinho do usuário logado, se existir",
                  "timedOut": null,
                  "duration": 1471,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_serverestNegative.default.cancelarCarrinho().then(res => {\n  expect(res.status).to.be.eq(200);\n  cy.contractValidator(res, 'delete-carrinhos-cancelar-compra', 200).then(res => expect(res).to.be.eq('Contrato válido!'));\n});",
                  "err": {},
                  "uuid": "b997905f-5b0a-4e50-8aaa-951569e16277",
                  "parentUUID": "acd06649-2d82-456a-b97c-7eaaa9d8374e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "CTN18 - Não deve cadastrar um carrinho com produtos duplicados",
                  "fullTitle": "Casos de teste negativos sobre a rota /carrinhos da API Serverest Logar com sucesso CTN18 - Não deve cadastrar um carrinho com produtos duplicados",
                  "timedOut": null,
                  "duration": 1433,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_serverestNegative.default.cadastrarCarrinhoSemSucesso().then(res => {\n  expect(res.status).to.be.eq(400);\n  cy.contractValidator(res, 'post-carrinhos', 400).then(res => expect(res).to.be.eq('Contrato válido!'));\n  expect(res.body.message).to.be.eq('Não é permitido possuir produto duplicado');\n});",
                  "err": {},
                  "uuid": "bb869c07-37c8-47d2-8107-1fd227aed37e",
                  "parentUUID": "acd06649-2d82-456a-b97c-7eaaa9d8374e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "CTN19 - Não deve cadastrar um carrinho com produtos não cadastrados",
                  "fullTitle": "Casos de teste negativos sobre a rota /carrinhos da API Serverest Logar com sucesso CTN19 - Não deve cadastrar um carrinho com produtos não cadastrados",
                  "timedOut": null,
                  "duration": 1460,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_serverestNegative.default.cadastrarCarrinhoSemSucessoInex().then(res => {\n  expect(res.status).to.be.eq(400);\n  cy.contractValidator(res, 'post-carrinhos', 400).then(res => expect(res).to.be.eq('Contrato válido!'));\n  expect(res.body.message).to.be.eq('Produto não encontrado');\n});",
                  "err": {},
                  "uuid": "85c62730-084e-406e-8d13-f4def2df9155",
                  "parentUUID": "acd06649-2d82-456a-b97c-7eaaa9d8374e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "CTN20 - Não deve cadastrar um carrinho com um produto sem quantidade o suficiente",
                  "fullTitle": "Casos de teste negativos sobre a rota /carrinhos da API Serverest Logar com sucesso CTN20 - Não deve cadastrar um carrinho com um produto sem quantidade o suficiente",
                  "timedOut": null,
                  "duration": 1551,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_serverestNegative.default.cadastrarCarrinhoSemSucessoQuantidade().then(res => {\n  expect(res.status).to.be.eq(400);\n  cy.contractValidator(res, 'post-carrinhos', 400).then(res => expect(res).to.be.eq('Contrato válido!'));\n  expect(res.body.message).to.be.eq('Produto não possui quantidade suficiente');\n});",
                  "err": {},
                  "uuid": "b290674d-5202-4a0c-8cf1-e776a153efb5",
                  "parentUUID": "acd06649-2d82-456a-b97c-7eaaa9d8374e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "CTN21 - Não deve cadastrar um carrinho para um usuário que já tenha um carrinho",
                  "fullTitle": "Casos de teste negativos sobre a rota /carrinhos da API Serverest Logar com sucesso CTN21 - Não deve cadastrar um carrinho para um usuário que já tenha um carrinho",
                  "timedOut": null,
                  "duration": 1557,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_serverestNegative.default.cadastrarCarrinhoComSucesso();\n_serverestNegative.default.cadastrarCarrinhoSemSucessoDuplicado().then(res => {\n  expect(res.status).to.be.eq(400);\n  cy.contractValidator(res, 'post-carrinhos', 400).then(res => expect(res).to.be.eq('Contrato válido!'));\n  expect(res.body.message).to.be.eq('Não é permitido ter mais de 1 carrinho');\n});",
                  "err": {},
                  "uuid": "7cf92a48-1f7d-468d-a17a-966f766ad58f",
                  "parentUUID": "acd06649-2d82-456a-b97c-7eaaa9d8374e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b997905f-5b0a-4e50-8aaa-951569e16277",
                "bb869c07-37c8-47d2-8107-1fd227aed37e",
                "85c62730-084e-406e-8d13-f4def2df9155",
                "b290674d-5202-4a0c-8cf1-e776a153efb5",
                "7cf92a48-1f7d-468d-a17a-966f766ad58f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7472,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "f547d60f-1aa2-463d-9c1b-dc2045b05232",
            "726ed019-e659-4b6b-876a-174abc99425b",
            "0276f4ea-32c8-49f8-a5fc-d62b53929bcb",
            "193d0123-9394-4968-ba7f-686a0dd95c06"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1148,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "92267242-d8e3-45b1-bef0-67ea49a997b9",
      "title": "",
      "fullFile": "cypress/integration/9.fluxoDeCompra.tf.spec.js",
      "file": "cypress/integration/9.fluxoDeCompra.tf.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "bcd5be76-b63f-43ff-a861-9956a19a0e61",
          "title": "CFT01 - Fluxo de compra da API Serverest",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Usuário se cadastra com sucesso",
              "fullTitle": "CFT01 - Fluxo de compra da API Serverest Usuário se cadastra com sucesso",
              "timedOut": null,
              "duration": 576,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_serverest.default.cadastrarUsuarioComSucesso().then(res => {\n  expect(res.status).to.be.eq(201);\n  cy.contractValidator(res, 'post-usuarios', 201).then(res => expect(res).to.be.eq('Contrato válido!'));\n  expect(res.body.message).to.be.eq('Cadastro realizado com sucesso');\n  _serverest.default.salvarIdUsuario(res);\n});",
              "err": {},
              "uuid": "d1b2fc47-e227-411a-a1bd-ec0eb807626b",
              "parentUUID": "bcd5be76-b63f-43ff-a861-9956a19a0e61",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "96911877-3a0b-4a67-8ce4-01252ad96d39",
              "title": "Usuário loga com sucesso",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Usuário olha os produtos disponíveis",
                  "fullTitle": "CFT01 - Fluxo de compra da API Serverest Usuário loga com sucesso Usuário olha os produtos disponíveis",
                  "timedOut": null,
                  "duration": 1412,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.buscarProdutos().then(res => {\n  expect(res.status).to.be.eq(200);\n  _validaServerest.default.validarBuscaDeProdutos(res);\n});",
                  "err": {},
                  "uuid": "1c8e45a1-16d3-4936-bab3-8c3ac1f703af",
                  "parentUUID": "96911877-3a0b-4a67-8ce4-01252ad96d39",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Usuário adiciona o produto que desejar no carrinho",
                  "fullTitle": "CFT01 - Fluxo de compra da API Serverest Usuário loga com sucesso Usuário adiciona o produto que desejar no carrinho",
                  "timedOut": null,
                  "duration": 1344,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.cadastrarCarrinhoComSucesso().then(res => {\n  expect(res.status).to.be.eq(201);\n  cy.contractValidator(res, 'post-carrinhos', 201).then(res => expect(res).to.be.eq('Contrato válido!'));\n  expect(res.body.message).to.be.eq('Cadastro realizado com sucesso');\n});",
                  "err": {},
                  "uuid": "3c8cf3d5-96f3-4914-8329-6f8e3fbfb7b9",
                  "parentUUID": "96911877-3a0b-4a67-8ce4-01252ad96d39",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Usuário conclui a compra com sucesso",
                  "fullTitle": "CFT01 - Fluxo de compra da API Serverest Usuário loga com sucesso Usuário conclui a compra com sucesso",
                  "timedOut": null,
                  "duration": 1265,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.concluirCarrinho().then(res => {\n  expect(res.status).to.be.eq(200);\n  cy.contractValidator(res, 'delete-carrinhos-concluir-compra', 200).then(res => expect(res).to.be.eq('Contrato válido!'));\n  expect(res.body.message).to.be.eq('Registro excluído com sucesso');\n});",
                  "err": {},
                  "uuid": "21790a6d-8088-4a1c-9a0a-fb05eab51e4b",
                  "parentUUID": "96911877-3a0b-4a67-8ce4-01252ad96d39",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1c8e45a1-16d3-4936-bab3-8c3ac1f703af",
                "3c8cf3d5-96f3-4914-8329-6f8e3fbfb7b9",
                "21790a6d-8088-4a1c-9a0a-fb05eab51e4b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4021,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "d1b2fc47-e227-411a-a1bd-ec0eb807626b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 576,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "34a922fe-e3c5-469d-8503-e31c89d2d44b",
      "title": "",
      "fullFile": "cypress/integration/1.login.tp.spec.js",
      "file": "cypress/integration/1.login.tp.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "1fffea2e-5172-4f07-a143-9eaadd93e625",
          "title": "Casos de teste positivos sobre a rota /login da API Serverest",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "CTP01 - Deve realizar um login com sucesso",
              "fullTitle": "Casos de teste positivos sobre a rota /login da API Serverest CTP01 - Deve realizar um login com sucesso",
              "timedOut": null,
              "duration": 2028,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_serverest.default.verificarSeExisteUsuario();\n_serverest.default.buscarUsuarioParaLogin();\ncy.get('@usuarioLogin').then(usuario => {\n  _serverest.default.logar(usuario).then(res => {\n    cy.contractValidator(res, 'post-login', 200).then(res => expect(res).to.be.eq('Contrato válido!'));\n    expect(res.status).to.be.eq(200);\n    _validaServerest.default.validarLoginComSucesso(res);\n    _serverest.default.salvarBearer(res);\n  });\n});",
              "err": {},
              "uuid": "32c87e85-aa6a-461a-b4b3-846b7e9fc533",
              "parentUUID": "1fffea2e-5172-4f07-a143-9eaadd93e625",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "32c87e85-aa6a-461a-b4b3-846b7e9fc533"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2028,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "cypress/reports/mocha",
        "quite": true,
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}